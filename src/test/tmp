
//개발동기- 단점,
// 요구사항- 분석 - 설계 /////- 구현 - 개발 - 유지보수
//       설계툴(카카오오븐 등)
// 서론 / 개발동기/ 문제점/ 관련연구(국내 , 국외)ㅏ/ 문제점, 장점, 단점
// 본론/ 전체 시스템 구성도
// 결론/ 기여도 (사회 기여도)
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include "UI/imgui_context.h"
#include <stb/stb_image.h>

#include <iostream>
#include <vector>

#include <filesystem>

namespace fs = std::filesystem;

void mouse_btn_callback(GLFWwindow *window, int button, int action, int mods);
void framebuffer_size_callback(GLFWwindow *window, int width, int height);
void mouse_callback(GLFWwindow *window, double xpos, double ypos);
void scroll_callback(GLFWwindow *window, double xoffset, double yoffset);
void processInput(GLFWwindow *window);

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 800;

// model attribute
glm::vec3 model_translation(0.0f, 0.0f, 0.0f);
float model_size = 1.0f;
float model_rotation_z = 0.0f;
float model_rotation_x = 0.0f;
float model_rotation_y = 0.0f;

// camera
glcpp::Camera camera(glm::vec3(0.0f, 0.0f, 20.0f));
bool is_pressed = false;
bool is_pressed_scroll = false;
glm::vec2 prev_mouse{-1.0f, -1.0f}, cur_mouse{-1.0f, -1.0f};

// timing
float deltaTime = 0.0f;
float lastFrame = 0.0f;
glcpp::Window g_window(SCR_WIDTH, SCR_HEIGHT, "glcpp-test");
std::shared_ptr<glcpp::Model> ourModel = std::make_shared<glcpp::Model>(fs::canonical(fs::path("./resources/models/nanosuit/nanosuit.obj")).string().c_str());
std::unique_ptr<glcpp::Framebuffer> skybox_framebuffer;
std::unique_ptr<glcpp::Framebuffer> scene_framebuffer;

// UI
std::unique_ptr<ImGuiContext> g_ui = std::make_unique<ImGuiContext>();
bool is_hovered_preview = false;
bool is_hovered_scene = false;

// skybox
std::vector<std::string> skybox_faces[]{
    {"./resources/textures/skybox/right.jpg",
     "./resources/textures/skybox/left.jpg",
     "./resources/textures/skybox/top.jpg",
     "./resources/textures/skybox/bottom.jpg",
     "./resources/textures/skybox/front.jpg",
     "./resources/textures/skybox/back.jpg"},
    {"./resources/textures/cube/Bridge2/px.jpg",
     "./resources/textures/cube/Bridge2/nx.jpg",
     "./resources/textures/cube/Bridge2/py.jpg",
     "./resources/textures/cube/Bridge2/ny.jpg",
     "./resources/textures/cube/Bridge2/pz.jpg",
     "./resources/textures/cube/Bridge2/nz.jpg"},
    {"./resources/textures/cube/MilkyWay/px.jpg",
     "./resources/textures/cube/MilkyWay/nx.jpg",
     "./resources/textures/cube/MilkyWay/py.jpg",
     "./resources/textures/cube/MilkyWay/ny.jpg",
     "./resources/textures/cube/MilkyWay/pz.jpg",
     "./resources/textures/cube/MilkyWay/nz.jpg"},
    {"./resources/textures/cube/pisa/px.png",
     "./resources/textures/cube/pisa/nx.png",
     "./resources/textures/cube/pisa/py.png",
     "./resources/textures/cube/pisa/ny.png",
     "./resources/textures/cube/pisa/pz.png",
     "./resources/textures/cube/pisa/nz.png"}};

bool is_skybox_blur = false;
std::unique_ptr<PixelateFramebuffer> pixelate_fb;
int main()
{
    // tell stb_image.h to flip loaded texture's on the y-axis (before loading model).
    stbi_set_flip_vertically_on_load(true);

    glfwSetFramebufferSizeCallback(g_window.get_handle(), framebuffer_size_callback);
    glfwSetCursorPosCallback(g_window.get_handle(), mouse_callback);
    glfwSetScrollCallback(g_window.get_handle(), scroll_callback);
    glfwSetMouseButtonCallback(g_window.get_handle(), mouse_btn_callback);
    // tell GLFW to capture our mouse
    //  glfwSetInputMode(g_window.get_handle(), GLFW_CURSOR, GLFW_CURSOR_DISABLED);
    // build and compile shaders
    // -------------------------
    glcpp::Shader ourShader("./resources/shaders/1.model_loading.vs", "./resources/shaders/1.model_loading.fs");
    glcpp::Shader frameShader("./resources/shaders/simple_framebuffer.vs", "./resources/shaders/simple_framebuffer.fs");
    glcpp::Shader blurShader("./resources/shaders/simple_framebuffer.vs", "./resources/shaders/skybox_blur.fs");
    glcpp::Shader debugShader("./resources/shaders/1.model_loading.vs", "./resources/shaders/debug_model.fs");
    glcpp::Shader alphaframeShader("./resources/shaders/simple_framebuffer.vs", "./resources/shaders/alpha_model.fs");

    std::shared_ptr<glcpp::Shader> frameShd = std::make_shared<glcpp::Shader>("./resources/shaders/simple_framebuffer.vs", "./resources/shaders/simple_framebuffer.fs");
    std::shared_ptr<glcpp::Shader> debugShd = std::make_shared<glcpp::Shader>("./resources/shaders/1.model_loading.vs", "./resources/shaders/debug_model.fs");
    pixelate_fb = std::make_unique<PixelateFramebuffer>(SCR_WIDTH, SCR_HEIGHT);
    pixelate_fb->set_pixelate_shader(frameShd);
    pixelate_fb->set_RGB_shader(frameShd);
    pixelate_fb->set_tmp_shader(debugShd);

    // load models
    // -----------
    glcpp::Cubemap skybox(skybox_faces[0],
                          "./resources/shaders/skybox.vs",
                          "./resources/shaders/skybox.fs");

    g_window.set_factor();

    skybox_framebuffer = std::make_unique<glcpp::Framebuffer>(g_window.get_width(), g_window.get_height());
    scene_framebuffer = std::make_unique<glcpp::Framebuffer>(g_window.get_width(), g_window.get_height());
    g_ui->init(g_window.get_handle());

    // render loop
    // -----------
    while (!g_window.should_close())
    {
        // per-frame time logic
        // --------------------
        float currentFrame = static_cast<float>(glfwGetTime());
        deltaTime = currentFrame - lastFrame;

        lastFrame = currentFrame;

        // input
        // -----
        processInput(g_window.get_handle());

        g_ui->begin();

        // view/projection transformations
        glm::mat4 projection = glm::perspective(glm::radians(camera.Zoom), g_ui->get_aspect(), 0.1f, 10000.0f);
        glm::mat4 view = camera.GetViewMatrix();

        // skybox capture for blur skybox
        glBindFramebuffer(GL_FRAMEBUFFER, skybox_framebuffer->get_fbo());
        {
            glEnable(GL_DEPTH_TEST);
            glViewport(0, 0, skybox_framebuffer->get_width(), skybox_framebuffer->get_height());
            glClearColor(0.3f, 0.3f, 0.3f, 0.3f);
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
            skybox.draw(view, projection);
        }
        ourModel->get_transform().set_translation(glm::vec3(0.0f, 0.0f, 0.0f)).set_scale(glm::vec3(1.0f, 1.0f, 1.0f)).set_rotation(glm::vec3(0.0f, 0.0f, 0.0f));

        pixelate_fb->pre_draw(ourModel, ourShader, view, projection);

        //  render skybox and captured pixelated model
        glBindFramebuffer(GL_FRAMEBUFFER, scene_framebuffer->get_fbo());
        {
            glEnable(GL_DEPTH_TEST);
            glEnable(GL_BLEND);
            glViewport(0, 0, scene_framebuffer->get_width(), scene_framebuffer->get_height());
            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
            glClearColor(1.0f, 1.0f, 0.0f, 1.0f);
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

            if (is_skybox_blur)
            {
                glDepthMask(false);
                skybox_framebuffer->draw(blurShader);
                glDepthMask(true);
            }
            else
            {
                skybox.draw(view, projection);
            }
            // ourModel->draw(ourShader, view, projection);
            pixelate_fb->draw();
        }
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        {
            glViewport(0, 0, g_window.get_width(), g_window.get_height());
            glClearColor(0.3f, 0.3f, 0.3f, 1.0f);
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        }

        g_ui->post_draw(ourModel, is_skybox_blur, pixelate_fb.get());
        g_ui->draw_scene("scene1", scene_framebuffer->get_color_texture(), is_hovered_scene);
        g_ui->end();

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        glfwSwapBuffers(g_window.get_handle());
        glfwPollEvents();
    }
    // g_ui->shutdown();
    g_ui.release();
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow *window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow *window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and
    // height will be significantly larger than specified on retina displays.
    g_window.update_window();

    skybox_framebuffer.release();
    skybox_framebuffer = std::make_unique<glcpp::Framebuffer>(g_ui->get_width(), g_ui->get_height());
    scene_framebuffer.release();
    scene_framebuffer = std::make_unique<glcpp::Framebuffer>(g_ui->get_width(), g_ui->get_height());
}

// glfw: whenever the mouse moves, this callback is called
// -------------------------------------------------------
void mouse_callback(GLFWwindow *window, double xposIn, double yposIn)
{
    if (is_pressed)
    {
        camera.ProcessMouseMovement((static_cast<float>(yposIn) - prev_mouse.y) / 3.6f, (static_cast<float>(xposIn) - prev_mouse.x) / 3.6f);
        prev_mouse.x = xposIn;
        prev_mouse.y = yposIn;
    }
    cur_mouse.x = xposIn;
    cur_mouse.y = yposIn;
}
void mouse_btn_callback(GLFWwindow *window, int button, int action, int mods)
{
    if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_PRESS && is_hovered_scene)
    {
        prev_mouse.x = cur_mouse.x;
        prev_mouse.y = cur_mouse.y;
        is_pressed = true;
    }
    else
    {
        is_pressed = false;
    }
    if (button == GLFW_MOUSE_BUTTON_MIDDLE && action == GLFW_PRESS && is_hovered_scene) // && !ImGui::GetIO().WantCaptureMouse)
    {
        is_pressed_scroll = true;
    }
    else
    {
        is_pressed_scroll = false;
    }
}

// glfw: whenever the mouse scroll wheel scrolls, this callback is called
// ----------------------------------------------------------------------
void scroll_callback(GLFWwindow *window, double xoffset, double yoffset)
{
    if (is_hovered_scene)
        camera.ProcessMouseScroll(yoffset);
    if (is_pressed_scroll)
    {
        // TODO: MOVE TO CAMERA
    }
}